// src/api.js
import axios from 'axios';

const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5292';
const api = axios.create({
    baseURL: `${baseURL}/api`,
    withCredentials: true,
    headers: {'Content-Type': 'application/json'}
});

api.interceptors.request.use(config => {
    const token = localStorage.getItem('accessToken');
    if (token && token !== 'undefined') {
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
}, error => {
    console.error("API Request Error:", error);
    return Promise.reject(error);
});

api.interceptors.response.use(
    response => response,
    error => {
        if (error.response?.status === 401) {
            localStorage.removeItem('accessToken');
            localStorage.removeItem('user');
        }
        console.error('API Error:', error.response?.data || error.message);
        return Promise.reject(error);
    }
);

// Auth
export async function login(email, password) {
    try {
        const res = await api.post('/Users/login', {email, password});
        return res.data;
    } catch (error) {
        console.error('Login error:', error.response?.data || error.message);
        throw error;
    }
}

export async function signup(email, password, nickname, confirmPassword, role = "string") {
    try {
        const res = await api.post('/Users/register', {
            name: nickname,
            email,
            password,
            confirmPassword,
            role
        });
        return res.data;
    } catch (error) {
        console.error('Signup error:', error.response?.data);
        throw error;
    }
}

// Movies
export async function getMovies() {
    const res = await api.get('/Movies');
    return res.data;
}

export async function getSimilarMovies(id) {
    const res = await api.get(`/ai/similar/${id}`);
    return res.data;
}

export async function getMovieDetails(id) {
    try {
        const res = await api.get(`/Movies/${id}`);
        return res.data;
    } catch (error) {
        if (error.response?.status === 404) {
            const allMovies = await getMovies();
            const movie = allMovies.find(m => m.movieId === +id || m.id === +id);
            if (movie) return movie;
        }
        throw error;
    }
}

export async function createMovie(movieDto) {
    const res = await api.post('/Movies', movieDto);
    return res.data;
}

// Search Movies function
export async function searchMovies(query) {
    console.log('üîç Searching movies with query:', query);

    if (!query || typeof query !== 'string' || query.trim().length === 0) {
        return [];
    }

    try {
        // Option 1: If you have a dedicated search endpoint
        // const res = await api.get(`/Movies/search?q=${encodeURIComponent(query.trim())}`);
        // return res.data;

        // Option 2: Search through all movies (fallback approach)
        const allMovies = await getMovies();
        const searchTerm = query.trim().toLowerCase();

        const filteredMovies = allMovies.filter(movie => {
            const title = (movie.title || movie.name || '').toLowerCase();
            const description = (movie.description || movie.summary || '').toLowerCase();
            const director = (movie.director || '').toLowerCase();

            return title.includes(searchTerm) ||
                description.includes(searchTerm) ||
                director.includes(searchTerm);
        });

        console.log(`üîç Found ${filteredMovies.length} movies for query: "${query}"`);
        return filteredMovies;

    } catch (error) {
        console.error('üîç Error searching movies:', error);

        // Return empty array on error instead of throwing
        // This prevents the search functionality from breaking the UI
        return [];
    }
}

// Genres
export async function getGenres() {
    const res = await api.get('/Genres');
    return res.data; // [{ genreId, name }]
}

export const getGenreById = async (id) => {
    const res = await fetch(`/api/Genres/${id}`);
    if (!res.ok) throw new Error('Genre not found');
    return res.json(); // { genreId, name }
};

export async function createGenre(dto) {
    const res = await api.post('/Genres', dto);
    return res.data; // { genreId, name }
}

// Comments
export async function getComments(filter) {
    try {
        const res = await api.get('/Comments');
        let comments = res.data;

        if (filter) {
            if (filter.userId !== undefined) {
                comments = comments.filter(c => c.userId === Number(filter.userId));
            }
            if (filter.movieId !== undefined) {
                comments = comments.filter(c => c.movieId === Number(filter.movieId));
            }
        }

        return comments;
    } catch (error) {
        console.error('Error fetching comments:', error);
        throw error;
    }
}

export async function deleteComment(id) {
    const res = await api.delete(`/Comments/${id}`);
    return res.data;
}

export async function postComment(movieId, comment) {
    const res = await api.post('/Comments', {
        movieId: parseInt(movieId),
        content: comment
    });
    return res.data;
}

// Playlists
export async function getPlaylists() {
    console.log('üìã Getting all playlists');

    try {
        const res = await api.get('/playlists');
        console.log('üìã Playlists response:', res.data);
        return res.data || [];
    } catch (error) {
        console.error('üìã Error getting playlists:', error);

        if (error.response?.status === 404) {
            // No playlists found
            return [];
        }

        throw new Error(`Failed to load playlists: ${error.message}`);
    }
}

export async function getPlaylistMovies(playlistId) {
    console.log('üé¨ Getting movies for playlist:', playlistId);

    if (!playlistId) {
        throw new Error('Playlist ID is required');
    }

    try {
        // GET /api/playlistmovies
        const res = await api.get('/playlistmovies');
        const allLinks = Array.isArray(res.data) ? res.data : [];

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∏ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        const links = allLinks.filter(pm => pm.playlistId === Number(playlistId));

        // –ü–æ –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ñ–∏–ª—å–º–∞
        const movies = await Promise.all(
            links.map(async pm => {
                try {
                    return await getMovieDetails(pm.movieId);
                } catch (err) {
                    console.error(`Error loading movie ${pm.movieId}:`, err);
                    return null;
                }
            })
        );

        // –£–±–∏—Ä–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        return movies.filter(m => m !== null);
    } catch (error) {
        console.error('üé¨ Error getting playlist movies:', error);
        throw new Error(`Failed to load playlist movies: ${error.message}`);
    }
}

export async function getPlaylistById(playlistId) {
    console.log('üìã Getting playlist by ID:', playlistId);

    try {
        const res = await api.get(`/playlists/${playlistId}`);
        return res.data;
    } catch (error) {
        console.error('üìã Error getting playlist:', error);

        if (error.response?.status === 404) {
            throw new Error('Playlist not found');
        }

        throw new Error(`Failed to load playlist: ${error.message}`);
    }
}

export async function removeMovieFromPlaylistDirect(playlistId, movieId) {
    console.log('üóëÔ∏è Removing movie from playlist (direct):', { playlistId, movieId });

    try {
        const res = await api.delete(`/playlistmovies/playlist/${playlistId}/movie/${movieId}`);
        return res.data;
    } catch (error) {
        console.error('üóëÔ∏è Error removing movie from playlist (direct):', error);
        throw error;
    }
}

export async function removeMovieFromPlaylist(playlistId, movieId) {
    console.log('üóëÔ∏è Removing movie from playlist:', { playlistId, movieId });

    if (!playlistId || !movieId) {
        throw new Error('Both playlist ID and movie ID are required');
    }

    try {
        // DELETE /api/playlistmovies/{playlistId}/{movieId}
        await api.delete(`/playlistmovies/${Number(playlistId)}/${Number(movieId)}`);
        console.log('üóëÔ∏è Movie removed from playlist successfully');
    } catch (error) {
        console.error('üóëÔ∏è Error removing movie from playlist:', error);
        if (error.response?.status === 404) {
            throw new Error('Movie or playlist not found');
        }
        throw new Error(`Failed to remove movie from playlist: ${error.message}`);
    }
}
// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è createPlaylist
export async function createPlaylist(name, firstMovieId = null) {
    console.log('üöÄ API createPlaylist called with:', { name, firstMovieId });

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
    let userId = null;

    try {
        const userFromStorage = localStorage.getItem('user');
        console.log('üîç createPlaylist ‚ûî userFromStorage:', userFromStorage);

        if (userFromStorage && userFromStorage !== 'undefined') {
            const parsedUser = JSON.parse(userFromStorage);
            console.log('üîç createPlaylist ‚ûî parsedUser:', parsedUser);

            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
            userId = parsedUser.id || parsedUser.userId || parsedUser.user_id;
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ localStorage, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ç–æ–∫–µ–Ω–∞
        if (!userId) {
            const token = localStorage.getItem('accessToken');
            if (token && token !== 'undefined') {
                try {
                    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω (—Ç–æ–ª—å–∫–æ payload, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏)
                    const payload = JSON.parse(atob(token.split('.')[1]));
                    console.log('üîç createPlaylist ‚ûî token payload:', payload);

                    userId = payload.sub || payload.userId || payload.user_id || payload.id;
                } catch (tokenError) {
                    console.error('Error decoding token:', tokenError);
                }
            }
        }

    } catch (error) {
        console.error("Error getting user data:", error);
    }

    console.log('üîç createPlaylist ‚ûî final userId:', userId);

    if (!userId) {
        throw new Error('Unable to determine user ID. Please log in again.');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!name || typeof name !== 'string' || name.trim().length === 0) {
        throw new Error('Playlist name is required');
    }

    if (name.trim().length > 100) {
        throw new Error('Playlist name is too long (max 100 characters)');
    }

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è POST /api/playlists (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç PlaylistCreateDto)
    const playlistData = {
        name: name.trim(),
        userId: parseInt(userId, 10)
    };

    console.log('üîç createPlaylist ‚ûî sending data:', playlistData);

    try {
        // –°–æ–∑–¥–∞—ë–º –ø–ª–µ–π–ª–∏—Å—Ç
        const res = await api.post('/playlists', playlistData);
        console.log('üîç createPlaylist ‚ûî server response:', res.data);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        if (!res.data) {
            throw new Error('Empty response from server');
        }

        // –ë—ç–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å PlaylistId (PascalCase –∏–ª–∏ camelCase)
        const createdPlaylist = res.data;
        const playlistId = createdPlaylist.playlistId || createdPlaylist.PlaylistId;

        if (!playlistId) {
            console.error('No playlist ID in response:', createdPlaylist);
            throw new Error('Server did not return playlist ID');
        }

        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ firstMovieId ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º –≤ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
        if (firstMovieId && playlistId) {
            try {
                console.log('üîç createPlaylist ‚ûî adding first movie:', firstMovieId, 'to playlist:', playlistId);
                await addMovieToPlaylist(playlistId, firstMovieId);
                console.log('üîç createPlaylist ‚ûî first movie added successfully');
            } catch (movieError) {
                console.error("Error adding first movie to playlist:", movieError);
                // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –ø–ª–µ–π–ª–∏—Å—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω
                // –ù–æ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                console.warn("Playlist created but couldn't add the first movie");
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ID –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        const result = {
            ...createdPlaylist,
            id: playlistId, // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ id –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
            playlistId: playlistId // –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ
        };

        console.log('üîç createPlaylist ‚ûî returning result:', result);
        return result;

    } catch (error) {
        console.error('üîç createPlaylist ‚ûî API error:', error);

        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if (error.response) {
            // –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            const serverError = error.response.data;
            console.error('Server error response:', serverError);

            if (serverError.message) {
                throw new Error(serverError.message);
            } else if (serverError.errors) {
                // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç ASP.NET Core
                const validationErrors = Object.values(serverError.errors).flat();
                throw new Error(validationErrors.join(', '));
            } else if (typeof serverError === 'string') {
                throw new Error(serverError);
            } else {
                throw new Error(`Server error: ${error.response.status} ${error.response.statusText}`);
            }
        } else if (error.request) {
            // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏
            throw new Error('Network error: Unable to connect to server');
        } else {
            // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            throw error;
        }
    }
}

// –ó–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é updatePlaylist –≤ api.js –Ω–∞ —ç—Ç—É —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
export async function updatePlaylist(id, data) {
    console.log('üìù Updating playlist:', { id, data });

    if (!id) {
        throw new Error('Playlist ID is required');
    }

    if (!data || (!data.name && !data.title)) {
        throw new Error('Playlist name is required');
    }

    try {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updateData = {
            name: data.name || data.title,
            // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã
            ...(data.description && { description: data.description }),
            ...(data.posterUrl && { posterUrl: data.posterUrl })
        };

        console.log('üìù Sending update data:', updateData);

        const res = await api.put(`/playlists/${id}`, updateData);
        console.log('üìù Playlist updated successfully:', res.data);

        return res.data;

    } catch (error) {
        console.error('üìù Error updating playlist:', error);

        if (error.response) {
            const status = error.response.status;
            const errorData = error.response.data;

            switch (status) {
                case 404:
                    throw new Error('Playlist not found');
                case 403:
                    throw new Error('You do not have permission to edit this playlist');
                case 401:
                    throw new Error('You must be logged in to edit playlists');
                case 400:
                    if (errorData?.message) {
                        throw new Error(errorData.message);
                    } else if (errorData?.errors) {
                        const validationErrors = Object.values(errorData.errors).flat();
                        throw new Error(validationErrors.join(', '));
                    } else {
                        throw new Error('Invalid playlist data');
                    }
                default:
                    throw new Error(`Server error: ${status}`);
            }
        } else if (error.request) {
            throw new Error('Network error: Unable to connect to server');
        } else {
            throw error;
        }
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
export async function deletePlaylist(id) {
    console.log('üóëÔ∏è API deletePlaylist called with ID:', id);

    if (!id) {
        throw new Error('Playlist ID is required');
    }

    try {
        const res = await api.delete(`/playlists/${id}`);
        console.log('üóëÔ∏è Delete playlist API response:', res.status);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å (204 No Content –∏–ª–∏ 200 OK)
        if (res.status === 204 || res.status === 200) {
            console.log('üóëÔ∏è Playlist deleted successfully');
            return { success: true, message: 'Playlist deleted successfully' };
        } else {
            throw new Error(`Unexpected response status: ${res.status}`);
        }

    } catch (error) {
        console.error('üóëÔ∏è Delete playlist API error:', error);

        if (error.response) {
            const status = error.response.status;
            const errorData = error.response.data;

            console.error('üóëÔ∏è Error response:', { status, data: errorData });

            switch (status) {
                case 404:
                    throw new Error('Playlist not found. It may have been already deleted.');
                case 403:
                    throw new Error('You do not have permission to delete this playlist.');
                case 401:
                    throw new Error('You must be logged in to delete playlists.');
                case 400:
                    throw new Error('Invalid playlist ID.');
                default:
                    if (errorData?.message) {
                        throw new Error(errorData.message);
                    } else if (typeof errorData === 'string') {
                        throw new Error(errorData);
                    } else {
                        throw new Error(`Server error: ${status}`);
                    }
            }
        } else if (error.request) {
            throw new Error('Network error: Unable to connect to server.');
        } else {
            throw error;
        }
    }
}

export async function addMovieToPlaylist(playlistId, movieId) {
    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ PlaylistMoviesController.Create([FromBody] PlaylistMovieCreateDto dto)
    const res = await api.post('/playlistmovies', {
        playlistId: parseInt(playlistId, 10),
        movieId: parseInt(movieId, 10)
    });
    return res.data;
}

export async function deleteMovie(id) {
    const res = await api.delete(`/Movies/${id}`);
    return res.data;
}

// Users
export async function getAllUsers() {
    const res = await api.get('/Users');
    return res.data;
}

export async function deleteUser(id) {
    const res = await api.delete(`/Users/${id}`);
    return res.data;
}

export async function getUserById(id) {
    const res = await api.get(`/Users/${id}`);
    return res.data;
}

// History
export async function getUserHistory(userId) {
    console.log('üì∫ Getting history for user:', userId);

    if (!userId) {
        throw new Error('User ID is required');
    }

    try {
        const res = await api.get('/History');
        console.log('üì∫ Raw history response:', res.data);

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ userId –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        const userHistory = res.data
            .filter(item => item.userId === parseInt(userId))
            .sort((a, b) => new Date(b.viewedAt) - new Date(a.viewedAt));

        console.log('üì∫ Filtered user history:', userHistory);
        return userHistory;
    } catch (error) {
        console.error('Error fetching user history:', error);

        // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        if (error.response?.status === 404) {
            return [];
        }

        throw error;
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è userId
function getCurrentUserId() {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
        const userFromStorage = localStorage.getItem('user');
        if (userFromStorage && userFromStorage !== 'undefined') {
            const userData = JSON.parse(userFromStorage);
            const userId = userData.id || userData.userId || userData.user_id;
            if (userId) return userId;
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ user, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ç–æ–∫–µ–Ω–∞
        const token = localStorage.getItem('accessToken');
        if (token && token !== 'undefined') {
            try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                const userId = payload.sub || payload.userId || payload.user_id || payload.id;
                if (userId) return userId;
            } catch (tokenError) {
                console.error('Error decoding token:', tokenError);
            }
        }
    } catch (error) {
        console.error("Error getting user ID:", error);
    }
    return null;
}

export async function addToHistory(movieId) {
    console.log('üì∫ Adding movie to history:', movieId);

    if (!movieId) {
        throw new Error('Movie ID is required');
    }

    const userId = getCurrentUserId();
    if (!userId) {
        throw new Error('User not authenticated');
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∏–ª—å–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingHistory = await getUserHistory(userId);
        const existingItem = existingHistory.find(item =>
            item.movieId === parseInt(movieId)
        );

        // –ï—Å–ª–∏ —Ñ–∏–ª—å–º —É–∂–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if (existingItem) {
            console.log('üì∫ Movie already in history, updating view time');

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
            await deleteHistoryItem(existingItem.id);

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            const historyData = {
                userId: parseInt(userId),
                movieId: parseInt(movieId),
                viewedAt: new Date().toISOString()
            };

            const res = await api.post('/History', historyData);
            console.log('üì∫ History updated successfully:', res.data);
            return res.data;
        }

        const historyData = {
            userId: parseInt(userId),
            movieId: parseInt(movieId),
            viewedAt: new Date().toISOString()
        };

        console.log('üì∫ Sending history data:', historyData);

        const res = await api.post('/History', historyData);
        console.log('üì∫ History added successfully:', res.data);

        return res.data;
    } catch (error) {
        console.error('Error adding to history:', error);

        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (error.response?.status === 400) {
            throw new Error('Invalid data provided');
        }

        throw error;
    }
}

// –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: userId –∏ movieId
export async function deleteHistoryItem(userId, movieId) {
    console.log('üóëÔ∏è Deleting history item:', { userId, movieId });

    if (!userId || !movieId) {
        throw new Error('User ID and Movie ID are required to delete history item');
    }

    try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –¥–≤—É–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const res = await api.delete(`/History/${userId}/${movieId}`);
        console.log('üóëÔ∏è History item deleted successfully');

        return res.data;
    } catch (error) {
        console.error('Error deleting history item:', error);

        if (error.response?.status === 404) {
            throw new Error('History item not found');
        } else if (error.response?.status === 403) {
            throw new Error('You do not have permission to delete this item');
        }

        throw error;
    }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function clearUserHistory(userId) {
    console.log('üóëÔ∏è Clearing history for user:', userId);

    if (!userId) {
        // –ï—Å–ª–∏ userId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        userId = getCurrentUserId();
        if (!userId) {
            throw new Error('User ID is required');
        }
    }

    try {
        // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const res = await api.delete(`/History/user/${userId}`);
        console.log('üóëÔ∏è User history cleared successfully');

        return res.data;
    } catch (error) {
        console.error('Error clearing user history:', error);

        // –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ endpoint –Ω–µ—Ç, –æ—á–∏—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        if (error.response?.status === 404 || error.response?.status === 405) {
            console.log('üóëÔ∏è No bulk delete endpoint, clearing items individually');

            try {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const userHistory = await getUserHistory(userId);

                if (userHistory.length === 0) {
                    return { message: 'History is already empty' };
                }

                // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª—é—á
                const deletePromises = userHistory.map(item => {
                    const itemUserId = item.userId;
                    const itemMovieId = item.movieId;

                    if (!itemUserId || !itemMovieId) {
                        console.warn('History item without proper IDs:', item);
                        return Promise.resolve();
                    }

                    return deleteHistoryItem(itemUserId, itemMovieId);
                });

                await Promise.all(deletePromises);
                console.log('üóëÔ∏è All history items deleted successfully');

                return { message: 'History cleared successfully' };
            } catch (individualDeleteError) {
                console.error('Error during individual deletion:', individualDeleteError);
                throw new Error('Failed to clear history completely');
            }
        }

        if (error.response?.status === 403) {
            throw new Error('You do not have permission to clear this history');
        }

        throw error;
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
export async function getHistoryStats(userId) {
    console.log('üìä Getting history stats for user:', userId);

    if (!userId) {
        userId = getCurrentUserId();
        if (!userId) {
            throw new Error('User not authenticated');
        }
    }

    try {
        const history = await getUserHistory(userId);

        const stats = {
            totalMovies: history.length,
            watchedToday: 0,
            watchedThisWeek: 0,
            watchedThisMonth: 0,
            mostWatchedGenres: {},
            recentActivity: history.slice(0, 5) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ñ–∏–ª—å–º–æ–≤
        };

        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
        const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);

        history.forEach(item => {
            const viewDate = new Date(item.viewedAt);

            if (viewDate >= today) {
                stats.watchedToday++;
            }
            if (viewDate >= weekAgo) {
                stats.watchedThisWeek++;
            }
            if (viewDate >= monthAgo) {
                stats.watchedThisMonth++;
            }
        });

        return stats;
    } catch (error) {
        console.error('Error getting history stats:', error);
        return {
            totalMovies: 0,
            watchedToday: 0,
            watchedThisWeek: 0,
            watchedThisMonth: 0,
            mostWatchedGenres: {},
            recentActivity: []
        };
    }
}